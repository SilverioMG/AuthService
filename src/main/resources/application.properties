## Spring DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties)
##Configuracion Conexion B.D. PostgreSQL:
spring.datasource.url=jdbc:postgresql://localhost:5432/authservice
spring.datasource.username=postgres
spring.datasource.password=postgres
## The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQL9Dialect

# Hibernate ddl auto (create, create-drop, validate, update)
spring.jpa.hibernate.ddl-auto=update
# Show or not log for each sql query
spring.jpa.show-sql = true
#Sin esta linea en SpringBoot 2.x da fallo Hibernate porque no encuentra soporte para 'Lob', pero sino se usan no hace falta la comprobacion.
#spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

#Por defecto vale 'true' y provoca que para cada hilo se comparta la misma Conexion con la B.D., desde que se crea la peticion rest hasta que finaliza. Esto ayuda a que no se provoque
#la 'LazyInitializationException' cuando se quiere acceder a una propiedad de navegacion 'lazyLoad' desde un Controller por ejemplo porque ya se cerro la Transaction y la conexion con la B.D.
#que se utilizo desde la capa de servicio para recuperar la entidad. Pero en produccion provoca una bajada de rendimiento muy grande, puede que no queramos utilizar la B.D. en todas las peticiones
#http al servicio web, y en las que si se utiliza que se libere la conexion lo antes posible si no se sigue utilizando. 
#Hay que poner esta propiedad siempre a 'false', en Spring Framework (sin ser SpringBoot) ya viene deshabilitada pero en SpringBoot no. Y tener cuidado con las exceptions 'LazyInitializationException'
#y con la query N+1.
spring.jpa.open-in-view=false

#JWT (Spring Security JsonWebToken)
#app.jwtSecret= ATopeCode.SharingCoders.secretKey
#app.jwtExpirationInMs = 3600000